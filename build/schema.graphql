type Branch @entity {
  id: Bytes!
  count: BigInt!
  branchAddr: Bytes! # address
  parentToken: Bytes! # address
  voteToken: Bytes! # address
  proxyRegistered: Boolean
  snapshotVoteProxy: Bytes
  snapshotDelegation: Bytes

  members: [MemberBranch!]! @derivedFrom(field: "branch")
  payouts: [Payout!] @derivedFrom(field: "branch")
}

type Member @entity {
  id: Bytes!
  branches: [MemberBranch!] @derivedFrom(field: "member")
  payouts: [Payout!] @derivedFrom(field: "member")
}

type MemberBranch @entity {
  id: Bytes! # Set to `member.addy.concat(branch.addy)`
  member: Member!
  branch: Branch!
  availableTokens: BigInt!
  totalTokens: BigInt!
  claimingTokens: BigInt!
  rewardAmount: BigInt!
}

type Payout @entity {
  id: ID! # Set to `memberBranch.id.concat(payout.id)`
  member: Member!
  branch: Branch!
  payoutId: BigInt!
  amount: BigInt!
  issuer: Bytes!
  receiver: Bytes!
  proof: String!
}
